type Query {
  getAppSettings: SettingsResponse @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getOrganizationRequests(
    status: [String]
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "DESC"
    sortedBy: String = "created"
  ): OrganizationRequestResult @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getOrganizationRequestById(id: ID!): OrganizationRequest
    @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getOrganizations(
    status: [String]
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "ASC"
    sortedBy: String = "name"
  ): OrganizationResult @cacheControl(scope: PUBLIC, maxAge: SHORT)

  getOrganizationsWithoutSalesManager: [Organization]
    @cacheControl(scope: PRIVATE)

  getOrganizationById(id: ID): Organization
    @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getOrganizationByIdStorefront(id: ID): Organization
    @withSession
    @cacheControl(scope: PRIVATE)
  getCostCenters(
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "ASC"
    sortedBy: String = "name"
  ): CostCenterResult @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getCostCentersByOrganizationId(
    id: ID
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "ASC"
    sortedBy: String = "name"
  ): CostCenterResult @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getCostCentersByOrganizationIdStorefront(
    id: ID
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "ASC"
    sortedBy: String = "name"
  ): CostCenterResult @withSession @cacheControl(scope: PRIVATE)
  getCostCenterById(id: ID!): CostCenter
    @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getCostCenterByIdStorefront(id: ID): CostCenter
    @withSession
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
  getUsers(organizationId: ID, costCenterId: ID): [B2BUser]
    @withSession
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
  getUsersPaginated(
    organizationId: ID
    costCenterId: ID
    page: Int
    pageSize: Int
    search: String
    sortOrder: String
    sortedBy: String
  ): B2BUserPagination @withSession @cacheControl(scope: PRIVATE, maxAge: SHORT)
  getPaymentTerms: [PaymentTerm] @cacheControl(scope: PUBLIC, maxAge: SHORT)

  getOrganizationsByEmail(email: String): [B2BOrganization]
    @cacheControl(scope: PRIVATE)

  checkOrganizationIsActive(id: String): Boolean @cacheControl(scope: PRIVATE)
  getSalesChannels: [Channels] @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getBinding(email: String!): Boolean
    @withSession
    @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getMarketingTags(costId: ID!): MarketingTags
    @cacheControl(scope: PUBLIC, maxAge: SHORT)
  getB2BSettings: B2BSettings @cacheControl(scope: PUBLIC, maxAge: SHORT)
}

type Mutation {
  saveAppSettings: MutationResponse @cacheControl(scope: PRIVATE)
  createOrganizationRequest(input: OrganizationInput!): MasterDataResponse
  updateOrganizationRequest(
    id: ID!
    status: String!
    notes: String
  ): MutationResponse
  deleteOrganizationRequest(id: ID!): MutationResponse
  createOrganization(input: OrganizationInput!): OrganizationCostCenterResponse
    @checkAdminAccess
    @cacheControl(scope: PRIVATE)
  createCostCenter(
    organizationId: ID
    input: CostCenterInput!
  ): MasterDataResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  updateOrganization(
    id: ID!
    name: String!
    tradeName: String
    status: String!
    collections: [CollectionInput]
    paymentTerms: [PaymentTermInput]
    priceTables: [String]
    salesChannel: String
  ): MutationResponse @checkAdminAccess @cacheControl(scope: PRIVATE)
  updateCostCenter(id: ID!, input: CostCenterInput!): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  createCostCenterAddress(
    costCenterId: ID
    address: AddressInput
  ): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  updateCostCenterAddress(
    costCenterId: ID
    address: AddressInput
  ): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  deleteOrganization(id: ID!): MutationResponse
    @checkAdminAccess
    @cacheControl(scope: PRIVATE)
  deleteCostCenter(id: ID!): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  saveUser(
    id: ID
    roleId: ID!
    userId: ID
    orgId: ID
    costId: ID
    clId: ID
    canImpersonate: Boolean = false
    name: String!
    email: String!
  ): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  addUser(
    id: ID
    roleId: ID!
    userId: ID
    orgId: ID
    costId: ID
    clId: ID
    canImpersonate: Boolean = false
    name: String!
    email: String!
  ): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  updateUser(
    id: ID
    roleId: ID!
    userId: ID
    orgId: ID
    costId: ID
    clId: ID
    canImpersonate: Boolean = false
    name: String
    email: String
  ): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  removeUser(id: ID!, userId: ID, email: String!, clId: ID!): MutationResponse
    @withSession
    @withPermissions
    @checkUserAccess
    @cacheControl(scope: PRIVATE)
  impersonateUser(clId: ID, userId: ID): MutationResponse
    @withSession
    @withPermissions
    @cacheControl(scope: PRIVATE)
  saveSalesChannels(channels: [SalesChannelsInput]!): MutationResponse
    @checkAdminAccess
    @cacheControl(scope: PRIVATE)

  setMarketingTags(costId: ID!, tags: [String]!): MutationResponse
    @checkAdminAccess
    @withSession
    @withPermissions
    @cacheControl(scope: PRIVATE)

  saveB2BSettings(input: B2BSettingsInput): MutationResponse
    @withSession
    @withPermissions
}

type SettingsResponse {
  adminSetup: Data
}

type OrganizationRequestResult {
  data: [OrganizationRequest]
  pagination: Pagination
}

type OrganizationResult {
  data: [Organization]
  pagination: Pagination
}

type CostCenterResult {
  data: [CostCenter]
  pagination: Pagination
}

type Pagination {
  page: Int
  pageSize: Int
  total: Int
}

type OrganizationRequest {
  id: ID
  name: String
  tradeName: String
  defaultCostCenter: DefaultCostCenter
  b2bCustomerAdmin: B2BUserSimple
  status: String
  notes: String
  created: String
}

type B2BUserSimple {
  firstName: String
  lastName: String
  email: String
}

type DefaultCostCenter {
  name: String
  address: Address
  phoneNumber: String
  businessDocument: String
  stateRegistration: String
}

type Organization {
  id: ID
  name: String
  tradeName: String
  collections: [Collection]
  paymentTerms: [PaymentTerm]
  priceTables: [String]
  salesChannel: String
  costCenters: [ID]
  status: String
  created: String
}

type Collection {
  id: String
  name: String
}

type PaymentTerm {
  id: ID
  name: String
}

type CostCenter {
  id: ID
  name: String
  organization: ID
  addresses: [Address]
  paymentTerms: [PaymentTerm]
  phoneNumber: String
  businessDocument: String
  stateRegistration: String
}

type Address {
  addressId: String
  addressType: String
  addressQuery: String
  postalCode: String
  country: String
  receiverName: String
  city: String
  state: String
  street: String
  number: String
  complement: String
  neighborhood: String
  geoCoordinates: [Float]
  reference: String
}

type MasterDataResponse {
  id: String
  href: String
  status: String
}

type OrganizationCostCenterResponse {
  id: String
  costCenterId: String
  href: String
  status: String
}

type MutationResponse {
  id: String
  status: String
  message: String
}

type B2BUserPagination {
  data: [B2BUser]
  pagination: Pagination
}

type B2BUser {
  id: ID
  roleId: ID
  userId: ID
  clId: ID
  orgId: ID
  costId: ID
  name: String!
  email: String!
  canImpersonate: Boolean
  role: SimpleRole
  organizationName: String
  costCenterName: String
}

type B2BOrganization {
  id: ID
  clId: ID
  costId: ID
  orgId: ID
  roleId: ID
  role: SimpleRole
  organizationName: String
  organizationStatus: String
  costCenterName: String
}

type SimpleRole {
  id: ID
  name: String!
  slug: String
}

type Channels {
  id: String
  name: String
}

type MarketingTags {
  tags: [String]
}

type B2BSettings {
  autoApprove: Boolean
  defaultPaymentTerms: [PaymentTerm]
  defaultPriceTables: [String]
}

scalar Data

input OrganizationInput {
  name: String
  tradeName: String
  b2bCustomerAdmin: B2BUserInput
  defaultCostCenter: DefaultCostCenterInput
}

input B2BUserInput {
  firstName: String
  lastName: String
  email: String
}

input DefaultCostCenterInput {
  name: String
  address: AddressInput
  phoneNumber: String
  businessDocument: String
  stateRegistration: String
}

input CostCenterInput {
  name: String
  addresses: [AddressInput]
  paymentTerms: [PaymentTermInput]
  phoneNumber: String
  businessDocument: String
  stateRegistration: String
}

input AddressInput {
  addressId: String
  addressType: String
  addressQuery: String
  postalCode: String
  country: String
  receiverName: String
  city: String
  state: String
  street: String
  number: String
  complement: String
  neighborhood: String
  geoCoordinates: [Float]
  reference: String
}

input CollectionInput {
  id: String
  name: String
}

input PaymentTermInput {
  id: ID
  name: String
}

input SalesChannelsInput {
  id: String
  name: String
}

input B2BSettingsInput {
  autoApprove: Boolean
  defaultPaymentTerms: [PaymentTermInput]
  defaultPriceTables: [String]
}
